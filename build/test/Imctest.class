//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

@RunWith(PowerMockRunner.class)
@PrepareForTest({Calculo.class})
public class Imctest {
    Calculo calculo;
    private double peso;
    private double altura;

    public Imctest() {
    }

    @Before
    public void prepareTests() {
        this.calculo = new Calculo();
        this.peso = 100.0D;
        this.altura = 2.1D;
    }

    @Test
    public void testeimcMenor18() throws Exception {
        new Calculo();
        double atual = 0.0D;
        double esperado = 8.31D;
        atual = Calculo.calculaimc(30.0D, 1.9D);
        Assert.assertEquals(esperado, atual, 0.1D);
    }

    @Test
    public void testeimcMenor24() throws Exception {
        new Calculo();
        double atual = 0.0D;
        double esperado = 22.6D;
        atual = Calculo.calculaimc(100.0D, 2.1D);
        Assert.assertEquals(esperado, atual, 0.1D);
    }

    @Test
    public void testeimcMenor30() throws Exception {
        new Calculo();
        double atual = 0.0D;
        double esperado = 29.0D;
        atual = Calculo.calculaimc(85.0D, 1.71D);
        Assert.assertEquals(esperado, atual, 0.1D);
    }

    @Test
    public void testeimcMaior30() throws Exception {
        new Calculo();
        double atual = 0.0D;
        double esperado = 31.46D;
        atual = Calculo.calculaimc(92.0D, 1.71D);
        Assert.assertEquals(esperado, atual, 0.1D);
    }

    @Test(
        expected = Exception.class
    )
    public void testeAlturaNegativa() throws Exception {
        new Calculo();
        Calculo var10000 = this.calculo;
        Calculo.calculaimc(100.0D, -1.7D);
    }

    @Test(
        expected = Exception.class
    )
    public void testePesoNegativo() throws Exception {
        new Calculo();
        Calculo var10000 = this.calculo;
        Calculo.calculaimc(-100.0D, 1.7D);
    }

    @Test
    public void testecalculopesoidealh() {
        new Calculo();
        double atual = 0.0D;
        double esperado = 87.4D;
        atual = Calculo.calculapesoideal('h', 2.0D);
        Assert.assertEquals(esperado, atual, 0.0D);
    }

    @Test
    public void testecalculopesoidealf() {
        new Calculo();
        double atual = 0.0D;
        double esperado = 61.4D;
        atual = Calculo.calculapesoideal('m', 1.71D);
        Assert.assertEquals(esperado, atual, 0.1D);
    }

    @Test(
        expected = Exception.class
    )
    public void testeSexoDif() throws Exception {
        new Calculo();
        Calculo var10000 = this.calculo;
        Calculo.validaSexo('g');
    }

    @Test(
        expected = Exception.class
    )
    public void testeOpcao() throws Exception {
        new Calculo();
        Calculo var10000 = this.calculo;
        Calculo.validaOpcao(51);
    }

    @Test
    public void testimcmenor24mock() throws Exception {
        new Calculo();
        double atual = 0.0D;
        double esperado = 22.6D;
        Calculo.calculaimc(this.peso, this.altura);
        atual = Calculo.getResultado();
        Assert.assertEquals(atual, esperado, 0.1D);
    }

    @Test
    public void testimcmenor24mock2() throws Exception {
        Calculo spy = (Calculo)PowerMockito.spy(this.calculo);
        PowerMockito.when(Calculo.calculaimc(this.peso, this.altura));
        Calculo.calculaimc(this.peso, this.altura);
    }
}
